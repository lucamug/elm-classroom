#!/bin/bash
set -eu

# This is a configuration file read by the other bash scripts

# Variables

FOLDER_CURRENT=$(pwd)
SERVICE_NAME=$(basename $FOLDER_CURRENT)
TENANT_NAME=$(basename $(dirname $FOLDER_CURRENT))
REPO_NAME=$(basename $(git rev-parse --show-toplevel))
BRANCH_NAME=$(git branch | sed -n -e 's/^\* \(.*\)/\1/p') || true
COMMIT_HASH=$(git rev-parse --short HEAD) || true
NX_PUBLIC_URL=$(printenv NX_PUBLIC_URL) || true

# Folders

FOLDER_ROOT="./"
FOLDER_DIST="${FOLDER_ROOT}dist"
FOLDER_TEMP="${FOLDER_DIST}/TEMP"
FOLDER_NODE_MODULES="${FOLDER_ROOT}node_modules"

# Tools

ELM=$FOLDER_NODE_MODULES/elm/bin/elm
ELM_GO=$FOLDER_NODE_MODULES/elm-go/bin/elm-go.js
ELM_JSON=$FOLDER_NODE_MODULES/elm-json/bin/elm-json
ELM_DOC_PREVIEW=$FOLDER_NODE_MODULES/elm-doc-preview/cli.js
ELM_REVIEW=$FOLDER_NODE_MODULES/elm-review/bin/elm-review
ELM_FORMAT=$FOLDER_NODE_MODULES/elm-format/bin/elm-format
ELM_TEST=$FOLDER_NODE_MODULES/elm-test/bin/elm-test
NODEAPP_TERSER=$FOLDER_NODE_MODULES/terser/bin/terser
NODEAPP_ESBUILD=$FOLDER_NODE_MODULES/esbuild/bin/esbuild
NODEAPP_REPLACE=$FOLDER_NODE_MODULES/replace/bin/replace.js
NODEAPP_HTML_MINIFIER=$FOLDER_NODE_MODULES/html-minifier/cli.js
NODEAPP_NPM_CHECK_UPDATES=$FOLDER_NODE_MODULES/npm-check-updates/build/src/bin/cli.js

# Colors
# https://dev.to/ifenna__/adding-colors-to-bash-scripts-48g4

RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
BLUE="\e[34m"
MAGENTA="\e[35m"
CYAN="\e[36m"
GRAY="\e[90m"
BLACK="\e[30m"

LIGHT_RED="\e[91m"
LIGHT_GREEN="\e[92m"
LIGHT_YELLOW="\e[93m"
LIGHT_BLUE="\e[94m"
LIGHT_MAGENTA="\e[95m"
LIGHT_CYAN="\e[96m"
LIGHT_GRAY="\e[37m"

POINT="✨ "
STOP="\e[0m"
PRIMARY=$YELLOW
SECONDARY=$BLUE
DONE=" ${SECONDARY}done${STOP}\n"

function resetElmCache {
    if [ -d "elm-stuff" ]; then
        rm -rf elm-stuff
    fi

    if [ -d "~/.elm/0.19.0/package/*/*/*/*.dat" ]; then
        rm ~/.elm/0.19.0/package/*/*/*/*.dat
    fi
}

function removeAtomGarbage {
    find "./src" -name "Elmjutsu*" -type f -delete
}    

function echoCommand {
    printf "${BLUE}${POINT}Executing ${YELLOW}${0} ${BLUE}[${1}]${STOP}\n"
}

function singleCommand {
    echoCommand "${1}"
    printf "${YELLOW}${POINT}${2}${STOP}\n"
    printf "\n"
    eval "${1}"
}

function createIndexHtml {
    printf "${PRIMARY}${POINT}Creating index.html......."
    START_TIME=$SECONDS 
    SOURCE=docs/index.template.html
    TARGET=docs/index.html
    cp $SOURCE $TARGET
    COMMAND="$NODEAPP_REPLACE '\[=SERVICE_NAME\]'  '${SERVICE_NAME}'  ${TARGET} -m -i --silent"
    eval "${COMMAND}"
    COMMAND="$NODEAPP_REPLACE '\[=TENANT_NAME\]'   '${TENANT_NAME}'   ${TARGET} -m -i --silent"
    eval "${COMMAND}"
    COMMAND="$NODEAPP_REPLACE '\[=BRANCH_NAME\]'   '${BRANCH_NAME}'   ${TARGET} -m -i --silent"
    eval "${COMMAND}"
    COMMAND="$NODEAPP_REPLACE '\[=COMMIT_HASH\]'   '${COMMIT_HASH}'   ${TARGET} -m -i --silent"
    eval "${COMMAND}"
    COMMAND="$NODEAPP_REPLACE '\[=NX_PUBLIC_URL\]' '${NX_PUBLIC_URL}' ${TARGET} -m -i --silent"
    eval "${COMMAND}"
    COMMAND="$NODEAPP_REPLACE '\[=REPO_NAME\]' '${REPO_NAME}' ${TARGET} -m -i --silent"
    eval "${COMMAND}"
    COMMAND="$NODEAPP_REPLACE '<!DOCTYPE html>' '<!DOCTYPE html><!-- DO NOT EDIT - THIS FILE IS AUTOGENERATED FROM ${SOURCE} -->' ${TARGET} -m -i --silent"
    eval "${COMMAND}"
    ELAPSED_TIME=$(($SECONDS - $START_TIME))
    printf "$BLUE done in $ELAPSED_TIME secs$STOP\n"
}

printf "${BLUE}┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓${STOP}\n"
printf "${BLUE}┃              ┏━━┓┏┓                     ┃${STOP}\n"
printf "${BLUE}┃              ┃┏━┛┃┃                     ┃${STOP}\n"
printf "${BLUE}┃              ┃┗┓ ┃┃ ┏━━━━┓              ┃${STOP}\n"
printf "${BLUE}┃              ┃┏┛ ┃┃ ┃┏┓┏┓┃              ┃${STOP}\n"
printf "${BLUE}┃              ┃┗━┓┃┗┓┃┃┃┃┃┃              ┃${STOP}\n"
printf "${BLUE}┃              ┗━━┛┗━┛┗┛┗┛┗┛              ┃${STOP}\n"
printf "${BLUE}┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫${STOP}\n"
printf "${BLUE}┃                                         ┃${STOP}\r"
printf "${BLUE}┃ Repo___: ${REPO_NAME}${STOP}\n"
printf "${BLUE}┃                                         ┃${STOP}\r"
printf "${BLUE}┃ Branch_: ${BRANCH_NAME}${STOP}\n"
printf "${BLUE}┃                                         ┃${STOP}\r"
printf "${BLUE}┃ Commit_: ${COMMIT_HASH}${STOP}\n"
printf "${BLUE}┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛${STOP}\n"
printf "\n"
